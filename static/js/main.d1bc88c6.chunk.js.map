{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","auth","App","props","state","preloader","requests","bind","loadResources","logout","JSON","parse","window","localStorage","getItem","this","setState","setItem","axios","get","request","parsedRequests","data","currentRequest","push","console","log","e","target","value","stringify","Helmet","rel","type","href","fonts","font","weights","className","src","width","height","alt","onClick","charSet","map","moment","date","calendar","response","env_variables","token","token_name","total","phone","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1bc88c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport GoogleFontLoader from 'react-google-font-loader';\n\nimport axios from 'axios';\n\nimport {Helmet} from \"react-helmet\";\n\nimport moment from 'moment';\nrequire('moment/locale/pt-br');\n\nconst auth = {\n  ak: \"delivery123\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      preloader: true,\n      requests: [],\n      auth: false\n    };\n    this.auth = this.auth.bind(this);\n    this.loadResources = this.loadResources.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  componentDidMount() {\n    if (JSON.parse(window.localStorage.getItem('authenticated')) !== null) {\n      this.setState({ auth: true });\n      this.loadResources();\n    }\n  }\n  \n  logout() {\n    window.localStorage.setItem('authenticated', null);\n    this.setState({ auth: false, requests: [] });\n  }\n\n  async loadResources() {\n    this.setState({ preloader: true });\n    try {\n      let requests = await axios.get('https://acaiteria-karma.herokuapp.com/requests');\n      let parsedRequests = [];\n      let currentRequest;\n      for (let request in requests.data.data) {\n        currentRequest = requests.data.data[request];\n        currentRequest.request = JSON.parse(currentRequest.request);\n        parsedRequests.push(currentRequest);\n      }\n      this.setState({ requests: parsedRequests, preloader: false });\n      console.log(this.state);\n    } catch (err) {\n    }\n  }\n\n  auth(e) {\n    if (e.target.value === auth.ak) {\n      window.localStorage.setItem('authenticated', JSON.stringify(true));\n      this.setState({ auth: true });\n      this.loadResources();\n    }\n  }\n\n  render() {\n    return (\n      <>\n          <Helmet>\n            <link rel=\"icon\" type=\"image/jpg\" href=\"https://cdn.jsdelivr.net/gh/gabriellacerda/resources/karma.jpg\" />\n          </Helmet>\n          <GoogleFontLoader\n            fonts={[\n              {\n                font: 'Roboto',\n                weights: [100, 300, 400, 500],\n              }\n            ]}\n          />\n        {!this.state.auth ?\n          <div className=\"accessKey\">\n            <Helmet>\n              <meta charSet=\"utf-8\" />\n              <title>Sign in - Açaiteria Delivery - Karma &middot; Private instance</title>\n            </Helmet>\n          <div className=\"logo\">\n            <img src=\"https://cdn.jsdelivr.net/gh/gabriellacerda/resources/karma.jpg\" />\n          </div>\n          <div className=\"header\">\n            <h2>Açaiteria Delivery</h2>\n          </div>\n          <div className=\"header\">\n            <h1>Olá novamente! Entre com a chave de <br/> acesso para continuar...</h1>\n          </div>\n          <br/>\n          <div className=\"accessKeyInput\">\n            <span>Chave de acesso</span>\n            <input className=\"form-control\" type=\"text\" onChange={this.auth} />\n          </div>\n          <br/>\n          <div className=\"credits\">\n            <small>Built with Karma</small>\n          </div>\n          </div>:\n        <div className=\"panelView\">\n                      <nav className=\"navbar navbar-light\">\n              <a className=\"navbar-brand\" href=\"#\">\n                <img src=\"https://cdn.jsdelivr.net/gh/gabriellacerda/resources/karma.jpg\" width=\"30\" height=\"30\" alt=\"\" />\n                Karma\n              </a>\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link cursor-pointer\" onClick={this.logout}>Sair</a>\n                </li>\n              </ul>\n            </nav>\n          {this.state.preloader ?\n          <div>\n            <Helmet>\n              <meta charSet=\"utf-8\" />\n              <title>Obtendo dados frescos - Açaiteria Delivery - Karma &middot; Private instance</title>\n            </Helmet>\n            <div className=\"container mt-5 mb-5\">\n              <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                  <h4>Obtendo dados frescos &middot; Açaiteria Delivery</h4>\n                </div>\n              </div>\n            </div>\n          </div>\n          :\n          <div className=\"listing\">\n            <Helmet>\n              <meta charSet=\"utf-8\" />\n              <title>Eventos - Açaiteria Delivery - Karma &middot; Private instance</title>\n            </Helmet>\n            <div className=\"container mt-5 mb-5\">\n              <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                  <div className=\"btn-fixed\">\n                    <button className=\"btn btn-primary\" onClick={this.loadResources}>Atualizar</button>\n                  </div>\n                  <h4>Eventos &middot; Açaiteria Delivery</h4>\n                  <ul className=\"timeline\">\n                    {this.state.requests.map((request) => (\n                      <li>\n                        <a target=\"_blank\" href=\"https://www.totoprayogo.com/#\">Nova requisição</a>\n                        <a href=\"#\" className=\"float-right\">{moment(request.date).calendar()}</a>\n                        <p>\n                          <div>Endpoint:</div>\n                          {request.request.request} <br/>\n                          <code>{request.request.response}</code> <br/>\n                          <div>Env variables:</div>\n                          <code>\n                            CITY_TOKEN: {request.request.env_variables.token} <br/>\n                            CITY_ENV_K: {request.request.env_variables.token_name}\n                          </code>\n                          <div>Detalhes do pedido:</div>\n                          <code>\n                            Total: {request.request.total} <br/>\n                            Número de telefone: {request.request.phone} <br/>\n                          </code>\n                        </p>\n                      </li>\n                    ))}\n                  </ul>\n                  <br/>\n                  <div className=\"credits\">\n                    <small>&copy; 2020 Built with Karma</small>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>}\n        </div>}\n      </>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}